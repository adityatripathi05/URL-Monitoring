services:

  url-db:
    build:
      context: .
      dockerfile: Dockerfile.db
    container_name: url-db
    restart: unless-stopped
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    env_file: ./backend/.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: md5
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 3s
      timeout: 5s
      retries: 5

  url-redis:
    image: redis:7.2-alpine
    container_name: url-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis-data:/data
    env_file: ./backend/.env
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - monitoring-network

  url-backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: url-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/app
    env_file: ./backend/.env
    networks:
      - monitoring-network
    depends_on:
      url-db:
        condition: service_healthy
      url-redis:
        condition: service_healthy
      
  url-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: url-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}:80"
    networks:
      - monitoring-network
    depends_on:
      - url-backend

  url-pgadmin:
    image: dpage/pgadmin4
    container_name: url-pgadmin
    restart: unless-stopped
    ports:
      - "${PGAdmin_PORT}:80"
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - monitoring-network
    depends_on:
      url-db:
        condition: service_healthy

volumes:
  pg-data:
    driver: local
  pgadmin-data:
    driver: local
  redis-data:
    driver: local

networks:
  monitoring-network:
    driver: bridge
